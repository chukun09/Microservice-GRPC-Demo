@page "/attendance"
@using Blazored.LocalStorage
@using Core.Entites
@using AttendanceMicroservice
@using System.Security.Claims
@using WebAppBlazor.Helper
@using WebAppBlazor.Services.Attendance
@using WebAppBlazor.Services.Employee
@using WebAppBlazor.Shared.Components
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject IAttendanceService _attendanceService;
@inject IEmployeeService _employeeService;
@inject SweetAlertService Swal;
@inject ILocalStorageService _localStorage;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<h1>Attendance</h1>
@if (!isAdmin)
{
    <MudTable ServerData="@(new Func<TableState, Task<TableData<AttendanceEntity>>>(ServerReload))" T="AttendanceEntity"
              Hover="true" @ref="table" MultiSelection="true" SelectedItemsChanged="OnSelectedItemsChanged" Comparer="Comparer">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Table Attendances</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Checked In Time</MudTh>
            <MudTh>Checked Out Time</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Check In Time">@context.CheckinTime.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
            <MudTd DataLabel="Check Out Time">@(context.CheckoutTime != null && context.CheckoutTime.GetValueOrDefault().AddHours(-7) != DateTime.MinValue ? context.CheckoutTime.Value.ToString("dd/MM/yyyy HH:mm:ss") : "No Checked Out")</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <MudTable ServerData="@(new Func<TableState, Task<TableData<AttendanceEntity>>>(ServerReload))" T="AttendanceEntity"
              Hover="true" @ref="table" MultiSelection="true" SelectedItemsChanged="OnSelectedItemsChanged" Comparer="Comparer">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Table Attendances</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Employee</MudTh>
            <MudTh>Date Of Birth</MudTh>
            <MudTh>Department</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Checked In Time</MudTh>
            <MudTh>Checked Out Time</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Employee">@(employeeDictionary.ContainsKey(@context.EmployeeId) ? employeeDictionary[@context.EmployeeId]?.FirstName + ' ' + employeeDictionary[@context.EmployeeId]?.LastName : "Không tồn tại")</MudTd>
            <MudTd DataLabel="DateOfBirth">@employeeDictionary[@context.EmployeeId]?.DateOfBirth.GetValueOrDefault().ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Department">@(employeeDictionary[@context.EmployeeId]?.Department?.Name ?? "Chưa có phòng ban")</MudTd>
            <MudTd DataLabel="Date">@context.Date.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Check In Time">@context.CheckinTime.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
            <MudTd DataLabel="Check Out Time">@(context.CheckoutTime != null && context.CheckoutTime.GetValueOrDefault().AddHours(-7) != DateTime.MinValue ? context.CheckoutTime.Value.ToString("dd/MM/yyyy HH:mm:ss") : "No Checked Out")</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private IEnumerable<AttendanceEntity> pagedData;
    private MudTable<AttendanceEntity> table;
    private ElementComparer Comparer = new();
    private int totalItems;
    private string searchString = null;
    private AttendanceEntity selectedAttendance;
    private Modal modal { get; set; }
    private bool isSingleSelected = false;
    private bool isAdmin = false;
    private IEnumerable<EmployeeEntity> listEmployees;
    private Dictionary<string, EmployeeEntity> employeeDictionary;
    protected override async Task OnInitializedAsync()
    {
        var checkRoleUser = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAdminClaims = checkRoleUser.User?.FindFirst("role")?.Value ?? "";
        isAdmin = isAdminClaims.Contains("Admin");
        listEmployees = await _employeeService.GetAllAsync();
        employeeDictionary = listEmployees.ToDictionary(x => x.Id, x => x);
    }
    private void OnSelectedItemsChanged(HashSet<AttendanceEntity> elements)
    {
        if (elements.Count == 1)
        {
            isSingleSelected = true;
            selectedAttendance = elements.First();
        }
        else
        {
            selectedAttendance = new AttendanceEntity();
            isSingleSelected = false;
        }
    }
    private async Task<TableData<AttendanceEntity>> ServerReload(TableState state)
    {
        IEnumerable<AttendanceEntity> data = new List<AttendanceEntity>();
        if (!isAdmin)
        {
            var employeeId = await _localStorage.GetItemAsync<string>("employeeId");
            data = await _attendanceService.GetAllAttendanceByEmployeeIdAsync(employeeId);
        }
        else
        {
            data = await _attendanceService.GetAllAsync();
        }
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Date.ToString("dd/MM/yyyy").Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<AttendanceEntity>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
        table.SelectedItems = null;
    }


    class ElementComparer : IEqualityComparer<AttendanceEntity>
    {
        public bool Equals(AttendanceEntity a, AttendanceEntity b) => a?.Id == b?.Id;
        public int GetHashCode(AttendanceEntity x) => HashCode.Combine(x?.Id);
    }
}