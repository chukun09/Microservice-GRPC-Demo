@page "/department"
@using Core.Entites
@using DepartmentMicroservice
@using WebAppBlazor.Services.Department
@using WebAppBlazor.Shared.Components
@attribute [Authorize(Roles = "Admin")]
@inject IJSRuntime JSRuntime
@inject IDepartmentService _departmentService;
@inject SweetAlertService Swal;

<style>
    .modal {
        transition: opacity 0.3s ease-in-out;
    }

        .modal.hidden {
            opacity: 0;
            pointer-events: none;
        }

</style>
<h1>Department</h1>
<div class="d-flex justify-content-end m-3">
    <ul class="list-inline m-0">
        <li class="list-inline-item">
            <button class="btn btn-sm btn-primary" type="button" @onclick="openCreateModal" data-placement="top" title="Create">
                <img src="/images/icon-create.svg" height="16px" /> Create
            </button>
        </li>
        <li class="list-inline-item">
            <button class="btn btn-sm btn-primary" disabled="@(!isSingleSelected)" type="button" @onclick="openEditModal" data-placement="top" title="Edit">
                <img src="/images/icon-edit.svg" height="16px" /> Edit
            </button>
        </li>
        <li class="list-inline-item">
            <button class="btn btn-sm btn-danger" type="button" disabled="@(!isSingleSelected)" @onclick="Delete" data-placement="top" title="Delete">
                <img src="/images/icon-delete.svg" height="16px" /> Delete
            </button>
        </li>
    </ul>

</div>
<MudTable ServerData="@(new Func<TableState, Task<TableData<DepartmentEntity>>>(ServerReload))" T="DepartmentEntity"
          Hover="true" @ref="table" MultiSelection="true" SelectedItemsChanged="OnSelectedItemsChanged" Comparer="Comparer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Table Departments</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First Name">@context.Name</MudTd>
        <MudTd DataLabel="Last Name">@context.Description</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
@* Modal  *@
<Modal @ref="modal">
    <Title>Department Modal</Title>
    <Body>
        <EditForm Model="@departmentModel" OnValidSubmit="SaveDepartmentEntity">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <InputText type="text" class="form-control" id="name" @bind-Value="departmentModel.Name" placeholder="Name" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <InputText type="text" class="form-control" id="lastName" @bind-Value="departmentModel.Description" placeholder="Description" />
            </div>
            <hr />
            <div class="d-flex justify-content-end m-3">
                <button type="submit" class="btn btn-primary me-3">Save changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => modal.Close()">Close</button>
            </div>
        </EditForm>
    </Body>
    @*     <Footer>
    </Footer> *@
</Modal>
@code {
    private IEnumerable<DepartmentEntity> pagedData;
    private MudTable<DepartmentEntity> table;
    private ElementComparer Comparer = new();
    private int totalItems;
    private string searchString = null;
    private DepartmentEntity selectedDepartment;
    private DepartmentEntity departmentModel = new DepartmentEntity();
    private Modal modal { get; set; }
    private bool isSingleSelected = false;
    // private bool isSelected
    // private void SaveDepartment()
    // {
    //     // Implement logic to save the departmentModel object
    //     // For example, you can call a method in a service to save the department data

    //     modal.Close(); // Close the modal after saving
    // }
    private void OnSelectedItemsChanged(HashSet<DepartmentEntity> elements)
    {
        if (elements.Count == 1)
        {
            isSingleSelected = true;
            selectedDepartment = elements.First();
        }
        else
        {
            selectedDepartment = new DepartmentEntity();
            isSingleSelected = false;
        }
    }
    private async Task openCreateModal()
    {
        departmentModel = new DepartmentEntity();
        departmentModel.Id = null;
        await modal.Open();
    }
    private async Task openEditModal()
    {
        departmentModel = new DepartmentEntity()
            {
                Id = selectedDepartment.Id,
                Description = selectedDepartment.Description,
                Name = selectedDepartment.Name
            };
        await modal.Open();
    }
    private async Task Delete()
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You will not be able to recover this imaginary file!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "No, keep it"
            });

        if (!string.IsNullOrEmpty(result.Value))
        {
            await _departmentService.DeleteAsync(selectedDepartment.Id);
            await Swal.FireAsync(
                "Deleted",
                "Your records has been deleted.",
               SweetAlertIcon.Success
                );
            await Task.Delay(300);
            await table.ReloadServerData();
            table.SelectedItems = null;
        }
        else if (result.Dismiss == DismissReason.Cancel)
        {
            await Swal.FireAsync(
                "Cancelled",
                "Your record is safe :)",
                SweetAlertIcon.Question
                );
        }

    }
    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<DepartmentEntity>> ServerReload(TableState state)
    {
        IEnumerable<DepartmentEntity> data = await _departmentService.GetAllAsync();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Description?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<DepartmentEntity>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
        table.SelectedItems = null;
    }


    async Task SaveDepartmentEntity()
    {
        if (string.IsNullOrEmpty(departmentModel?.Id))
        {

            var result = await _departmentService.AddAsync(departmentModel);
            await Swal.FireAsync("Create Department", "Create Department Succesful", SweetAlertIcon.Success);
            await modal.Close();
        }
        else
        {
            var result = await _departmentService.UpdateAsync(departmentModel);
            await Swal.FireAsync("Update Department", "Update Department Succesful", SweetAlertIcon.Success);
            await modal.Close();
            table.SelectedItems = null;
        }
        await Task.Delay(300);
        await table.ReloadServerData();
        // StateHasChanged();
    }

    class ElementComparer : IEqualityComparer<DepartmentEntity>
    {
        public bool Equals(DepartmentEntity a, DepartmentEntity b) => a?.Id == b?.Id;
        public int GetHashCode(DepartmentEntity x) => HashCode.Combine(x?.Id);
    }
}